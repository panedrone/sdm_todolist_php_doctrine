<?php

// Code generated by a tool. DO NOT EDIT.
// https://sqldalmaker.sourceforge.net/

namespace dao;

include_once __DIR__ . '/../models/Group.php';
include_once __DIR__ . '/../models/GroupLI.php';

use models\Group;
use models\GroupLI;

class GroupsDao
{
    /**
     * @var \DataStore
     */
    protected $ds;

    public function __construct($ds)
    {
        $this->ds = $ds;
    }

    /**
     * (C)RUD: groups
     * Generated/AI values are passed to $p param
     * @param Group $p
     * @return void
     * @throws \Exception
     */
    public function create_group($p)
    {
        $this->ds->create($p);
    }

    /**
     * C(R)UD: groups
     * @return Group[]
     * @throws \Exception
     */
    public function read_group_list()
    {
        return $this->ds->readAll(Group::class);
    }

    /**
     * C(R)UD: groups
     * @param int $g_id
     * @return Group|FALSE on failure
     * @throws \Exception
     */
    public function read_group($g_id)
    {
        return $this->ds->read(Group::class, array("g_id" => $g_id));
    }

    /**
     * CR(U)D: groups
     * @param Group $p
     * @throws \Exception
     */
    public function update_group($p)
    {
        return $this->ds->update($p);
    }

    /**
     * CRU(D): groups
     * @param int $g_id
     * @throws \Exception
     */
    public function delete_group($g_id)
    {
        return $this->ds->delete(Group::class, array("g_id" => $g_id));
    }

    /**
     * @return GroupLI[]
     * @throws \Exception
     */
    public function get_all_groups()
    {
        $sql = "select g.*, "
            . "\n (select count(*) from tasks where g_id=g.g_id) as tasks_count"
            . "\n from groups g"
            . "\n order by g.g_id";
        $res = array();
        $_map_cb = function ($row) use (&$res) {
            $obj = new GroupLI();
            $obj->set_g_id($row["g_id"]); // q <- q
            $obj->set_g_name($row["g_name"]); // q <- q
            $obj->set_tasks_count($row["tasks_count"]); // q <- q
            array_push($res, $obj);
        };
        $this->ds->queryRowList($sql, array(), $_map_cb);
        return $res;
    }

    /**
     * @param string $g_id
     * @return GroupLI|FALSE on failure
     * @throws \Exception
     */
    public function get_group($g_id)
    {
        $sql = "select g.*, "
            . "\n (select count(*) from tasks where g_id=g.g_id) as tasks_count"
            . "\n from groups g"
            . "\n where g.g_id=?";
        $row = $this->ds->queryRow($sql, array($g_id));
        if ($row) {
            $obj = new GroupLI();
            $obj->set_g_id($row["g_id"]); // q <- q
            $obj->set_g_name($row["g_name"]); // q <- q
            $obj->set_tasks_count($row["tasks_count"]); // q <- q
            return $obj;
        }
        return FALSE;
    }

    /**
     * @return array of object g_id
     * @throws \Exception
     */
    public function get_groups_ids()
    {
        $sql = "select g.*, "
            . "\n (select count(*) from tasks where g_id=g.g_id) as tasks_count"
            . "\n from groups g"
            . "\n order by g.g_id";
        return $this->ds->queryList($sql, array());
    }

    /**
     * @param string $g_id
     * @return mixed object g_id or FALSE on failure
     * @throws \Exception
     */
    public function get_group_id($g_id)
    {
        $sql = "select g.*, "
            . "\n (select count(*) from tasks where g_id=g.g_id) as tasks_count"
            . "\n from groups g"
            . "\n where g.g_id=?";
        return $this->ds->query($sql, array($g_id));
    }

    /**
     * @param string $g_name
     * @param string $g_id
     * @return int the affected rows count
     * @throws \Exception
     */
    public function rename_group($g_name, $g_id)
    {
        $sql = "update groups set g_name=? where g_id=?";
        return $this->ds->execDML($sql, array($g_name, $g_id));
    }
}
